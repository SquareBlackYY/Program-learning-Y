# 十六进制文本转换为4*4矩阵，且每行为一组
def hex_to_array(hex, type):
    str_16 = format(hex, "032x")
    return [[[int(str_16[2 * i:2 * i + 2], 16) for i in range(16)][4 * (i if type == 'text' else j) + (j if type == 'text' else i)] for i in range(4)] for j in range(4)]

def grouparray(p):
    return [p[j][i] for j in range(4) for i in range(4)]


def array16str(p):
    str_16 = ""
    for i in range(16):
        str_16 += format(p[i], "02x")
    return str_16


def key_xor(p, key):
    return [[p[i][j] ^ key[i][j] for j in range(4)] for i in range(4)]


def subBytes(p):
    sbox = [
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
    ]
    for i in range(4):
        for j in range(4):
            p[i][j] = sbox[p[i][j] // 16][p[i][j] % 16]
    return p


def shiftRows(p):
    return [[p[i][(i + j) % 4] for j in range(4)] for i in range(4)]


def mixColumns(p):
    matrix = [
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]
    ]
    mixarray = []
    for i in range(4):
        row = []
        for j in range(4):
            sum = 0
            for k in range(4):
                if matrix[i][k] == 1:
                    sum += p[k][j]
                elif matrix[i][k] == 2:
                    sum += (p[k][j] << 1) ^ ((p[k][j] >> 7) * 0x1B)
                elif matrix[i][k] == 3:
                    sum += ((p[k][j] << 1) ^ ((p[k][j] >> 7) * 0x1B)) ^ p[k][j]
            row.append(sum % 256)
        mixarray.append(row)
    return mixarray

def key_sub(key, i):
    sbox = [
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
    ]
    Rcon = [
        0x01, 0x02, 0x04, 0x08, 0x10,
        0x20, 0x40, 0x80, 0x1B, 0x36
    ]
    for j in range(4):
        key[j] = sbox[key[j] // 16][key[j] % 16]
    key[0] ^= Rcon[i]
    return key


def key_extend(key, F):
    k = []
    for i in range(4):
        tmp = []
        for j in range(4):
            tmp.append(key[i][j] ^ F[j])
        k.append(tmp)
        F = tmp
    return k

def g_convert(key, i):
    F = [key[(i + 1) % 4] for i in range(4)]
    F = key_sub(F, i)
    return F


# 密钥转置
def key_transpose(key_array):
    return [[key_array[j][i] for j in range(4)] for i in range(4)]

# 密钥流生成函数
def generate_key_schedule(seed_key):
    key_schedule = []
    seed_key_array = hex_to_array(seed_key, 'key')
    for i in range(11):
        key_schedule.append(key_transpose(seed_key_array))
        F = g_convert(seed_key_array[3], i)
        seed_key_array = key_extend(seed_key_array, F)
    return key_schedule

# 轮函数
def AES_round(text_array, key_array, mode, round_num):
    if mode == 'e':
        # 字节代换
        text_array = subBytes(text_array)
        # 行移位
        text_array = shiftRows(text_array)
        # 列混淆，最后一轮不进行
        if round_num != 10:
            text_array = mixColumns(text_array)
        # 轮密钥加
        text_array = key_xor(text_array, key_array)
    return text_array

# AES函数
def AES(text_hex, seed_key, mode):
    # 密钥生成
    key_schedule = generate_key_schedule(seed_key)
    # 文本分组
    text_array = hex_to_array(text_hex, 'text')
    # 轮函数
    for i in range(11):
        if mode == 'e' and i == 0:
            # 轮密钥加
            text_array = xor_with_key(text_array, key_schedule[0])
        else:
            text_array = AES_round(text_array, key_schedule[i], mode, i)
    
    p = subBytes(p)
    p = shiftRows(p)
    p = key_xor(p, k[10])
    p = grouparray(p)
    p = array16str(p)
    return p

plain_text = 0xfedcba98765432100123456789abcdef
seed_key = 0x1f1f1f1f0e0e0e0e1f1f1f1f0e0e0e0e

cipher_text = AES(plain_text, seed_key, 'e')

print("明文:0x{:x}\n密钥:0x{:x}".format(plain_text, Key))
print("密文:0x{}".format(cipher_text))