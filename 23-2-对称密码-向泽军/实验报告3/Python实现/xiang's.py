import copy

def int2array(p):
	# p = 0x0123456789abcdef
	return list(map(int, list(format(p, "064b"))))

def array2int(p):
	return int("".join(map(str, p)), 2)

def IP_permute(p):
	ipTable = [
	58,50,42,34,26,18,10,2,
	60,52,44,36,28,20,12,4,
	62,54,46,38,30,22,14,6,
	64,56,48,40,32,24,16,8,
	57,49,41,33,25,17,9,1,
	59,51,43,35,27,19,11,3,
	61,53,45,37,29,21,13,5,
	63,55,47,39,31,23,15,7]
	return [p[ipTable[i]-1] for i in range(64)]

def inv_IP_permute(p):
	ipReverseTable = [
	40,8,48,16,56,24,64,32,
	39,7,47,15,55,23,63,31,
	38,6,46,14,54,22,62,30,
	37,5,45,13,53,21,61,29,
	36,4,44,12,52,20,60,28,
	35,3,43,11,51,19,59,27,
	34,2,42,10,50,18,58,26,
	33,1,41,9,49,17,57,25]
	return [p[ipReverseTable[i]-1] for i in range(64)]

def expand_permute(p):
	epTable =[
	32,1,2,3,4,5,
	4,5,6,7,8,9,
	8,9,10,11,12,13,
	12,13,14,15,16,17,
	16,17,18,19,20,21,
	20,21,22,23,24,25,
	24,25,26,27,28,29,
	28,29,30,31,32,1]
	return [p[epTable[i] -1] for i in range(48)]

def key_xor(p, key):
	return [p[i] ^ key[i] for i in range(48)]

def sbox(p):
	sBox=[[
	[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
	[0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
	[4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
	[15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]],
	[[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
	[3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
	[0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
	[13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]],
	[[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
	[13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
	[13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
	[1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]],
	[[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
	[13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
	[10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
	[3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]],
	[[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
	[14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
	[4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
	[11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]],
	[[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
	[10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
	[9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
	[4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]],
	[[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
	[13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
	[1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
	[6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]],
	[[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
	[1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
	[7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
	[2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]]
	t =[]
	for i in range(8):
		row_index = p[0 + i* 6] * 2 + p[5 + i * 6]
		column_index = p[1 + i * 6] * 8 + p[2 + i * 6] * 4 + p[3 + i * 6] * 2 + p[4 + i * 6]
		t += list(map(int, list(format(sBox[i][row_index][column_index], "04b"))))
	return t

def permute(p):
	pTable = [
	16,7,20,21,
	29,12,28,17,
	1,15,23,26,
	5,18,31,10,
	2,8,24,14,
	32,27,3,9,
	19,13,30,6,
	22,11,4,25]
	return [p[pTable[i] -1] for i in range(32)]

def round_function(p, key):
	pl = p[0:32]
	pr = p[32:64]
	tmp = copy.deepcopy(pr)
	tmp = expand_permute(tmp)
	tmp = key_xor(tmp, key)
	tmp = sbox(tmp)
	tmp = permute(tmp)
	pl = [pl[i] ^ tmp[i] for i in range(32)]
	return pr + pl

def pc1(k):
	pc1Table = [
	57,49,41,33,25,17,9,1,
	58,50,42,34,26,18,10,2,
	59,51,43,35,27,19,11,3,
	60,52,44,36,63,55,47,39,
	31,23,15,7,62,54,46,38,
	30,22,14,6,61,53,45,37,
	29,21,13,5,28,20,12,4]
	return [k[pc1Table[i] - 1] for i in range(56)]

def rotate(k, i):
	offset = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]
	kl = k[0:28]
	kr = k[28:56]
	kl = [kl[(offset[i] + j) % 28] for j in range(28)]
	kr = [kr[(offset[i] + j) % 28] for j in range(28)]
	return kl + kr

def pc2(k):
	pc2Table = [
	14,17,11,24,1,5,
	3,28,15,6,21,10,
	23,19,12,4,26,8,
	16,7,27,20,13,2,
	41,52,31,37,47,55,
	30,40,51,45,33,48,
	44,49,39,56,34,53,
	46,42,50,36,29,32]
	return [k[pc2Table[i] - 1] for i in range(48)]

def key_schedule(Key):
	subkeys = []
	k = int2array(Key)
	k = pc1(k)
	for i in range(16):
		k = rotate(k, i)
		subkeys.append(pc2(k))
	return subkeys

def encrypt(plaintext, K):
	k = key_schedule(K)
	p = int2array(plaintext)
	p = IP_permute(p)
	for i in range(16):
		p = round_function(p, k[i])
	p = p[32:64] + p[0:32]
	p = inv_IP_permute(p)
	return array2int(p)

if __name__ == "__main__":
	plaintext = 0x0123456789abcdef
	Key = 0x1f1f1f1f0e0e0e0e
	plaintext2 = plaintext ^ 0xffffffffffffffff
	Key2 = Key ^ 0xffffffffffffffff
	print(hex(encrypt(plaintext, Key)))
	print(hex(encrypt(plaintext2, Key2)))